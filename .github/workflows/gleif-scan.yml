name: Daily GLEIF Scan + Overlay Injection

on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC
  workflow_dispatch:

jobs:
  gleif-scan:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install requests pyyaml

      - name: Run GLEIF alias scan
        run: python gleif_alias_scan.py

      - name: Commit results
        shell: pwsh
        run: |
          git config user.name "TrustBot"
          git config user.email "trustbot@travisryle.org"
          
          # Check if there are changes to commit
          $changes = git status --porcelain
          if (-not $changes) {
            Write-Host "No changes to commit"
            exit 0
          }
          
          git add gleif_results.xml trust_overlay.xml
          
          # Handle potential errors in commit
          try {
            git commit -m "Daily GLEIF scan + overlay update [$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss')]"
          } catch {
            Write-Host "No changes to commit or commit failed"
            exit 0
          }
          
          # Pull and handle conflicts before pushing
          git fetch origin main
          try {
            git merge origin/main --no-edit
          } catch {
            Write-Host "Merge conflict detected, attempting to resolve..."
            # Accept our changes for the scan results
            git checkout --ours gleif_results.xml trust_overlay.xml
            git add gleif_results.xml trust_overlay.xml
            git commit -m "Resolve merge conflict - keep GLEIF scan results"
          }
          
          # Retry push with backoff
          for ($i = 1; $i -le 3; $i++) {
            try {
              git push origin main
              Write-Host "Push successful"
              break
            } catch {
              Write-Host "Push failed, retrying in $($i * 2) seconds..."
              Start-Sleep -Seconds ($i * 2)
              git pull --rebase origin main
            }
          }
