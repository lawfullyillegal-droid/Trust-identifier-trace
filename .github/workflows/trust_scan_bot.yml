name: Trust Scan Bot

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-scan-results:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ensure output folder exists
        run: mkdir -p output

      - name: Run Trust Scan Bot
        run: |
          set -e
          if [ -f trust_scan_bot.py ]; then
            python trust_scan_bot.py > output/scan_results.json
          else
            echo "ERROR: trust_scan_bot.py not found in repo root"
            exit 1
          fi

      - name: Commit scan results
        run: |
          git config user.name "Trust Scan Bot"
          git config user.email "bot@trust.local"
          
          # Check if there are any changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add output/scan_results.json
          git commit -m "Auto-generate scan_results.json from bot run" || echo "No changes to commit"
          
          # Pull and handle conflicts before pushing
          git fetch origin main
          if ! git merge origin/main --no-edit; then
            echo "Merge conflict detected, attempting to resolve..."
            # Accept our changes for scan_results.json
            git checkout --ours output/scan_results.json
            git add output/scan_results.json
            git commit -m "Resolve merge conflict - keep bot-generated scan_results.json"
          fi
          
          # Retry push with backoff
          for i in {1..3}; do
            if git push origin main; then
              echo "Push successful"
              break
            else
              echo "Push failed, retrying in $((i * 2)) seconds..."
              sleep $((i * 2))
              git pull --rebase origin main
            fi
          done
